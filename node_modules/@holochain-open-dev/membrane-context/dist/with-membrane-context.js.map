{"version":3,"file":"with-membrane-context.js","sourceRoot":"","sources":["../src/with-membrane-context.ts"],"names":[],"mappings":";AACA,OAAO,EAAe,QAAQ,EAAE,MAAM,aAAa,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAQpD,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,SAAY,EAC2C,EAAE;IACzD,MAAM,uBAAwB,SAAQ,aAAa,CAAC,SAAS,CAAC;QAI5D,MAAM,KAAK,MAAM;YACf,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC7B,CAAC;KACF;IALC;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;oEACO;IAMpC,OAAQ,uBAC2C,CAAC;AACtD,CAAC,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { Constructor, property } from 'lit-element';\nimport { ConsumerMixin } from 'lit-element-context';\n\nexport interface MembraneContext {\n  cellId?: CellId;\n  appWebsocket?: AppWebsocket;\n  adminWebsocket?: AdminWebsocket;\n}\n\nexport const membraneContext = <T extends Constructor<HTMLElement>>(\n  baseClass: T\n): T & Constructor<{ membraneContext: MembraneContext }> => {\n  class MembraneContextConsumer extends ConsumerMixin(baseClass) {\n    @property({ type: Object })\n    membraneContext!: MembraneContext;\n\n    static get inject() {\n      return ['membraneContext'];\n    }\n  }\n  return (MembraneContextConsumer as unknown) as T &\n    Constructor<{ membraneContext: MembraneContext }>;\n};\n"]}