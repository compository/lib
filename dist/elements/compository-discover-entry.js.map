{"version":3,"file":"compository-discover-entry.js","sourceRoot":"","sources":["../../src/elements/compository-discover-entry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAe,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAkB,KAAK,EAAE,MAAM,aAAa,CAAC;AAC7F,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAE7D,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,eAAe,EAAE,MAAM,sCAAsC,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AAErE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kDAAkD,CAAC;AACpF,OAAO,EAAE,mBAAmB,IAAI,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAEzE,MAAM,OAAO,wBAAyB,SAAQ,eAAe,CAC3D,MAAM,CAAC,UAAU,CAA4B,CAC9C;IAFD;;QAOE,aAAQ,GAAG,IAAI,CAAC;IA2DlB,CAAC;IAtDC,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,uBAAuB,EAAE,gBAAgB;SAC1C,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,OAAuB;QAC7B,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvB,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;YACvE,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;IACH,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC/C,IAAI,CAAC,eAAe,CAAC,YAA4B,EACjD,IAAI,CAAC,eAAe,CAAC,MAAgB,CACtC,CAAC;QACF,MAAM,EACJ,MAAM,EACN,SAAS,EACT,aAAa,EACb,SAAS,GACV,GAAG,MAAM,oBAAoB,CAC5B,IAAI,CAAC,eAAe,CAAC,cAAgC,EACrD,kBAAkB,EAClB,IAAI,CAAC,QAAQ,CACd,CAAC;QAEF,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,MAAM,qBAAqB,CAClD,kBAAkB,EAClB,MAAM,EACN,SAAS,CACV,CAAC;QAEF,IAAI,SAAS,EAAE;YACb,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjD,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAChC,IAAI,CAAC,MAAM,CAAC,UAAwB,EACpC,IAAI,CAAC,eAAe,CAAC,YAA4B,EACjD,MAAM,EACN,SAAS,CACV,CAAC;SACH;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,QAAQ;YACvB,CAAC,CAAC,IAAI,CAAA,iDAAiD;YACvD,CAAC,CAAC,IAAI,CAAA,EAAE;2DAC2C,CAAC;IAC1D,CAAC;CACF;AA9DC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0DACT;AAGlB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0DACZ;AAGhB;IADC,KAAK,CAAC,QAAQ,CAAC;wDACU","sourcesContent":["import { Constructor, html, LitElement, property, PropertyValues, query } from 'lit-element';\nimport { discoverEntryDetails } from '../processes/discover';\nimport { CompositoryScope } from './compository-scope';\nimport { fetchRenderersForZome } from '../processes/fetch-renderers';\nimport { membraneContext } from '@holochain-open-dev/membrane-context';\nimport { CompositoryService } from '../services/compository-service';\nimport { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';\n\nexport class CompositoryDiscoverEntry extends membraneContext(\n  Scoped(LitElement) as Constructor<LitElement>\n) {\n  @property({ type: String })\n  entryUri!: string;\n\n  @property({ type: Boolean })\n  _loading = true;\n\n  @query('#scope')\n  _scope!: CompositoryScope;\n\n  static get scopedElements() {\n    return {\n      'mwc-circular-progress': CircularProgress,\n    };\n  }\n\n  updated(changed: PropertyValues) {\n    super.updated(changed);\n    if (changed.has('membraneContext') && this.membraneContext.appWebsocket) {\n      this.loadRenderers();\n    }\n  }\n\n  async loadRenderers() {\n    const compositoryService = new CompositoryService(\n      this.membraneContext.appWebsocket as AppWebsocket,\n      this.membraneContext.cellId as CellId\n    );\n    const {\n      cellId,\n      zomeIndex,\n      entryDefIndex,\n      entryHash,\n    } = await discoverEntryDetails(\n      this.membraneContext.adminWebsocket as AdminWebsocket,\n      compositoryService,\n      this.entryUri\n    );\n\n    const [def, renderers] = await fetchRenderersForZome(\n      compositoryService,\n      cellId,\n      zomeIndex\n    );\n\n    if (renderers) {\n      const entryIdStr = def.entry_defs[entryDefIndex];\n      renderers.entry[entryIdStr].render(\n        this._scope.shadowRoot as ShadowRoot,\n        this.membraneContext.appWebsocket as AppWebsocket,\n        cellId,\n        entryHash\n      );\n    }\n\n    this._loading = false;\n  }\n\n  render() {\n    return html`${this._loading\n        ? html`<mwc-circular-progress></mwc-circular-progress>`\n        : html``}\n      <compository-scope id=\"scope\"> </compository-scope> `;\n  }\n}\n"]}