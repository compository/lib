{"version":3,"file":"installed-cells.js","sourceRoot":"","sources":["../../src/elements/installed-cells.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { ScopedRegistryHost } from '@lit-labs/scoped-registry-mixin';\nimport { requestContext } from '@holochain-open-dev/context';\n\nimport { CellId, AdminWebsocket, AppWebsocket } from '@holochain/conductor-api';\nimport { Dictionary, serializeHash } from '@holochain-open-dev/core-types';\nimport { Card } from 'scoped-material-components/mwc-card';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { List } from 'scoped-material-components/mwc-list';\nimport { ListItem } from 'scoped-material-components/mwc-list-item';\nimport {\n  CompositoryService,\n  GetTemplateForDnaOutput,\n} from '../services/compository-service';\n\nimport { sharedStyles } from './sharedStyles';\nimport { COMPOSITORY_SERVICE_CONTEXT } from '../types/context';\n\nexport class InstalledCells extends ScopedRegistryHost(LitElement) {\n\n  @requestContext(COMPOSITORY_SERVICE_CONTEXT)\n  _compositoryService!: CompositoryService;\n\n  @state()\n  _installedCellIds!: Array<CellId>;\n\n  _dnaTemplateNames: Dictionary<string> = {};\n\n  firstUpdated() {\n    this.loadCellsIds();\n  }\n\n  get compositoryDnaHash(): string {\n    return serializeHash(this._compositoryService.cellId[0]);\n  }\n\n  async loadCellsIds() {\n    const cellIds = await this._compositoryService.adminWebsocket.listCellIds();\n\n    const instantiatedDnaHashes = cellIds\n      .map(cellId => serializeHash(cellId[0]))\n      .filter(hash => hash !== this.compositoryDnaHash);\n\n    this._dnaTemplateNames = await this.fetchDnaTemplateNames(\n      instantiatedDnaHashes\n    );\n\n    this._installedCellIds = cellIds;\n  }\n\n  async fetchDnaTemplateNames(\n    instantiatedDnaHashes: string[]\n  ): Promise<Dictionary<string>> {\n    const templates: Array<GetTemplateForDnaOutput> = [];\n    const promises = instantiatedDnaHashes.map(async hash => {\n      try {\n        const template = await this._compositoryService.getTemplateForDna(hash);\n        templates.push(template);\n      } catch (e) {\n        // Do nothing\n      }\n    });\n\n    await Promise.all(promises);\n    const names: Dictionary<string> = {};\n    for (let i = 0; i < templates.length; i++) {\n      names[instantiatedDnaHashes[i]] = templates[i].dnaTemplate.name;\n    }\n    return names;\n  }\n\n  getNonCompositoryCellIds() {\n    return this._installedCellIds.filter(\n      cellId => serializeHash(cellId[0]) !== this.compositoryDnaHash\n    );\n  }\n\n  render() {\n    if (!this._installedCellIds)\n      return html`<div class=\"fill center-content\">\n        <mwc-circular-progress indeterminate></mwc-circular-progress>\n      </div>`;\n\n    return html` <mwc-card class=\"fill\">\n      <div class=\"column fill\">\n        <span style=\"margin: 16px; margin-bottom: 0;\" class=\"title\"\n          >Installed DNAs</span\n        >\n        ${this.getNonCompositoryCellIds().length === 0\n          ? html`\n              <div class=\"fill center-content\">\n                <div style=\"margin: 32px; text-align: center;\" class=\"column\">\n                  <span style=\"margin-bottom: 16px;\" class=\"placeholder\"\n                    >You don't have any generated DNAs installed yet.</span\n                  >\n                  <span class=\"placeholder\"\n                    >Discover one of the DNAs available below, or compose some\n                    zomes to generate one yourself!</span\n                  >\n                </div>\n              </div>\n            `\n          : html`\n              <div class=\"flex-scrollable-parent\">\n                <div class=\"flex-scrollable-container\">\n                  <div class=\"flex-scrollable-y\">\n                    <mwc-list>\n                      ${this.getNonCompositoryCellIds().map(\n                        cellId =>\n                          html`<mwc-list-item\n                            @click=${() =>\n                              this.dispatchEvent(\n                                new CustomEvent('cell-selected', {\n                                  detail: { cellId },\n                                })\n                              )}\n                            twoline\n                          >\n                            <span\n                              >${this._dnaTemplateNames[\n                                serializeHash(cellId[0])\n                              ]}</span\n                            >\n                            <span slot=\"secondary\"\n                              >${serializeHash(cellId[0])}</span\n                            >\n                          </mwc-list-item>`\n                      )}\n                    </mwc-list>\n                  </div>\n                </div>\n              </div>\n            `}\n      </div>\n    </mwc-card>`;\n  }\n\n  static get styles() {\n    return sharedStyles;\n  }\n\n  static get scopedElements() {\n    return {\n      'mwc-list': List,\n      'mwc-list-item': ListItem,\n      'mwc-card': Card,\n      'mwc-circular-progress': CircularProgress,\n    };\n  }\n}\n"]}