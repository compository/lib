{"version":3,"file":"generate-dna-file.js","sourceRoot":"","sources":["../../src/processes/generate-dna-file.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAKxC,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,kBAAsC,EACtC,WAAwB,EACxB,IAAY,EACZ,UAAe;IAEf,oCAAoC;IACpC,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,CAC1D,SAAS,CAAC,kBAAkB,EAAE,QAAQ,CAAC,aAAa,CAAC,CACtD,CAAC;IACF,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE1C,wBAAwB;IACxB,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI;QACjB,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;KAClD,CAAC,CAAC;IACH,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACjE,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAE/C,iBAAiB;IACjB,MAAM,OAAO,GAAG,MAAM,UAAU,CAC9B,WAAW,CAAC,IAAI,EAChB,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAChE,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,KAAK,UAAU,SAAS,CACtB,kBAAsC,EACtC,WAAmB;IAEnB,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAEjE,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACtE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import { bundle_dna } from 'bundle-dna';\nimport { CompositoryService } from '../services/compository-service';\nimport { DnaTemplate, ZomeDef, ZomeDefReference } from '../types/dnas';\nimport { DnaFile } from '@holochain/conductor-api';\n\nexport async function generateDnaFile(\n  compositoryService: CompositoryService,\n  dnaTemplate: DnaTemplate,\n  uuid: string,\n  properties: any\n): Promise<DnaFile> {\n  // Fetch all zomes for that template\n  const promises = dnaTemplate.zome_defs.map(async zome_def =>\n    fetchZome(compositoryService, zome_def.zome_def_hash)\n  );\n  const zomes = await Promise.all(promises);\n\n  // Prepare the arguments\n  const argZomes = zomes.map(zome => [\n    zome.zomeDef.name,\n    { wasm_hash: Array.from(zome.zomeDef.wasm_hash) },\n  ]);\n  const codesPromises = zomes.map(zome => zome.file.arrayBuffer());\n  const codes = await Promise.all(codesPromises);\n\n  // Bundle the dna\n  const dnaFile = await bundle_dna(\n    dnaTemplate.name,\n    uuid,\n    properties,\n    argZomes,\n    codes.map(code => ({ code: Array.from(new Uint8Array(code)) }))\n  );\n\n  return dnaFile;\n}\n\nasync function fetchZome(\n  compositoryService: CompositoryService,\n  zomeDefHash: string\n): Promise<{ zomeDef: ZomeDef; file: File }> {\n  const zomeDef = await compositoryService.getZomeDef(zomeDefHash);\n\n  const file = await compositoryService.downloadFile(zomeDef.wasm_file);\n  return { zomeDef, file };\n}\n"]}